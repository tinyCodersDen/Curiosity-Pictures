/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEarthDateArgs } from "./CreateEarthDateArgs";
import { UpdateEarthDateArgs } from "./UpdateEarthDateArgs";
import { DeleteEarthDateArgs } from "./DeleteEarthDateArgs";
import { EarthDateCountArgs } from "./EarthDateCountArgs";
import { EarthDateFindManyArgs } from "./EarthDateFindManyArgs";
import { EarthDateFindUniqueArgs } from "./EarthDateFindUniqueArgs";
import { EarthDate } from "./EarthDate";
import { EarthDateService } from "../earthDate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EarthDate)
export class EarthDateResolverBase {
  constructor(
    protected readonly service: EarthDateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EarthDate",
    action: "read",
    possession: "any",
  })
  async _earthDatesMeta(
    @graphql.Args() args: EarthDateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EarthDate])
  @nestAccessControl.UseRoles({
    resource: "EarthDate",
    action: "read",
    possession: "any",
  })
  async earthDates(
    @graphql.Args() args: EarthDateFindManyArgs
  ): Promise<EarthDate[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EarthDate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EarthDate",
    action: "read",
    possession: "own",
  })
  async earthDate(
    @graphql.Args() args: EarthDateFindUniqueArgs
  ): Promise<EarthDate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EarthDate)
  @nestAccessControl.UseRoles({
    resource: "EarthDate",
    action: "create",
    possession: "any",
  })
  async createEarthDate(
    @graphql.Args() args: CreateEarthDateArgs
  ): Promise<EarthDate> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EarthDate)
  @nestAccessControl.UseRoles({
    resource: "EarthDate",
    action: "update",
    possession: "any",
  })
  async updateEarthDate(
    @graphql.Args() args: UpdateEarthDateArgs
  ): Promise<EarthDate | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EarthDate)
  @nestAccessControl.UseRoles({
    resource: "EarthDate",
    action: "delete",
    possession: "any",
  })
  async deleteEarthDate(
    @graphql.Args() args: DeleteEarthDateArgs
  ): Promise<EarthDate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
